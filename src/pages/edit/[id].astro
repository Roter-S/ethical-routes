---
import Layout from "@layouts/Layout.astro";
import AppLayout from "@layouts/AppLayout.astro";
import EditEthicalRoute from "@components/EditEthicalRoute";
import ArrowLeftIcon from "@components/icons/ArrowLeftIcon";
import { firestore } from "@lib/firebase/server";
import type { EthicalRouteTypeWithId } from "@lib/types";

const { id } = Astro.params;
let routeData: EthicalRouteTypeWithId | null = null;
let errorPage: Response | null = null;

// Función para cargar recursivamente las ramas
async function loadBranches(docRef: any): Promise<Record<string, any>> {
  const branches: Record<string, any> = {};
  const branchesSnapshot = await docRef.collection("branches").get();
  
  for (const branchDoc of branchesSnapshot.docs) {
    const branchData = branchDoc.data();
    const { created_at, updated_at, ...cleanBranchData } = branchData;
    const nestedBranches = await loadBranches(branchDoc.ref);
    branches[branchDoc.id] = {
      ...cleanBranchData,
      branches: Object.keys(nestedBranches).length > 0 ? nestedBranches : undefined
    };
  }
  
  return branches;
}

if (!id) {
  errorPage = Astro.redirect("/dashboard");
}

if (!errorPage && id) {
  try {
    const routeDoc = await firestore.collection("ethical_routes").doc(id).get();

    if (!routeDoc.exists) {
      errorPage = Astro.redirect("/404");
    } else {
      const data = routeDoc.data();
      const branches = await loadBranches(routeDoc.ref);
      
      routeData = {
        documentId: routeDoc.id,
        question: data?.question || "Pregunta no disponible",
        description: data?.description || "Descripción no disponible",
        participations: data?.participations || 0,
        created_at: data?.created_at || new Date(),
        difference: data?.difference,
        branches,
      } as EthicalRouteTypeWithId;
    }
  } catch (error) {
    console.error(`Error fetching ethical route with ID ${id}:`, error);
    errorPage = Astro.redirect("/404");
  }
}

if (errorPage) {
  return errorPage;
}

if (!routeData) {
  console.error(
    `Reached a state where routeData is null for ID: ${id} without an errorPage redirect.`,
  );
  return Astro.redirect("/404");
}

const pageTitle = routeData?.question
  ? `Editar: ${routeData.question.substring(0, 30)}...`
  : "Editar Caso Ético";
---

<Layout title={`${pageTitle} - Rutas Éticas`}>
  <AppLayout>
    <main class="w-full mx-auto max-w-3xl mt-10 flex flex-col items-center">
      <div class="w-full flex flex-col">
        <a
          href="/dashboard/"
          class="flex text-zinc-500 gap-1 items-center mb-4 text-sm hover:text-zinc-600 dark:hover:text-zinc-400 transition-colors duration-150"
        >
          <ArrowLeftIcon class="w-4 h-4" />
          Volver al dashboard
        </a>
        <h1 class="font-semibold sm:text-2xl text-xl dark:text-zinc-100 text-zinc-900 w-full mb-4">
          {pageTitle}
        </h1>
      </div>
      {
        routeData && id ? (
          <EditEthicalRoute client:load id={id} initialData={routeData} />
        ) : (
          <p class="text-center text-red-500 dark:text-red-400 p-8">
            No se pudo cargar la información del caso ético para editar o el ID no
            es válido.
          </p>
        )
      }
    </main>
  </AppLayout>
</Layout>
