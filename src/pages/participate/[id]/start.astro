---
import Layout from "@layouts/Layout.astro";
import AppLayout from "@layouts/AppLayout.astro";
import { firestore } from "@lib/firebase/server";
import type { EthicalRouteTypeWithId } from "@lib/types";
import EthicalRouteTree from "@components/EthicalRouteTree";
import ArrowLeftIcon from "@components/icons/ArrowLeftIcon";

const { id } = Astro.params;
let routeData: EthicalRouteTypeWithId | null = null;
let errorPage: Response | null = null;

// Función para cargar recursivamente las ramas
async function loadBranches(docRef: any): Promise<Record<string, any>> {
  const branches: Record<string, any> = {};
  const branchesSnapshot = await docRef.collection("branches").get();
  
  for (const branchDoc of branchesSnapshot.docs) {
    const branchData = branchDoc.data();
    const { created_at, updated_at, ...cleanBranchData } = branchData;
    const nestedBranches = await loadBranches(branchDoc.ref);
    branches[branchDoc.id] = {
      ...cleanBranchData,
      branches: Object.keys(nestedBranches).length > 0 ? nestedBranches : undefined
    };
  }
  
  return branches;
}

if (!id) {
  errorPage = Astro.redirect("/all");
}

if (!errorPage && id) {
  try {
    const routeDoc = await firestore.collection("ethical_routes").doc(id).get();
    if (!routeDoc.exists) {
      errorPage = Astro.redirect("/404");
    } else {
      const data = routeDoc.data();
      const branches = await loadBranches(routeDoc.ref);
      
      routeData = {
        documentId: routeDoc.id,
        question: data?.question || "Pregunta no disponible",
        description: data?.description || "Descripción no disponible",
        participations: data?.participations || 0,
        created_at: data?.created_at || new Date(),
        branches,
      } as EthicalRouteTypeWithId;
    }
  } catch (error) {
    console.error(`Error fetching ethical route with ID ${id}:`, error);
    errorPage = Astro.redirect("/404");
  }
}

if (errorPage) {
  return errorPage;
}
---

<Layout title={`Recorrido: ${routeData?.question ?? ""} - Rutas Éticas`}>
  <AppLayout>
    <main class="w-full mx-auto max-w-2xl mt-10 flex flex-col items-center">
      <a
        href={`/participate/${routeData?.documentId}`}
        class="flex text-zinc-500 gap-1 items-center mb-4 text-sm hover:text-zinc-600 dark:hover:text-zinc-400 transition-colors duration-150"
      >
        <ArrowLeftIcon class="w-4 h-4" />
        Regresar
      </a>
      <h1
        class="font-bold text-2xl sm:text-3xl text-center mb-2 dark:text-zinc-100 text-zinc-900"
      >
        {routeData?.question}
      </h1>
      <p class="text-zinc-600 dark:text-zinc-300 mb-6 text-center">
        {routeData?.description}
      </p>
      {routeData?.branches && <EthicalRouteTree tree={routeData} client:idle />}
    </main>
  </AppLayout>
</Layout>
